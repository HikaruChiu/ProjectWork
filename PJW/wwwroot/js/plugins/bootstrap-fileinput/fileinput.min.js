/*!
 * bootstrap-fileinput v4.3.4
 * http://plugins.krajee.com/file-input
 *
 * Author: Kartik Visweswaran
 * Copyright: 2014 - 2016, Kartik Visweswaran, Krajee.com
 *
 * Licensed under the BSD 3-Clause
 * https://github.com/kartik-v/bootstrap-fileinput/blob/master/LICENSE.md
 */
(function (a) { if (typeof define === "function" && define.amd) { define(["jquery"], a) } else { if (typeof module === "object" && module.exports) { module.exports = a(require("jquery")) } else { a(window.jQuery) } } }(function (R) { R.fn.fileinputLocales = R.fn.fileinputLocales || {}; R.fn.fileinputThemes = {}; var i, m, M, N, l, ak, k, p, Q, s, ai, G, am, I, r, c, b, K, B, E, ae, P, d, S, t, ap, D, u, aq, ad, J, w, O, an, Z, ag, af, y, n, W, ab, V, aa, g, j, L, T, U, Y, a, ac, v, ah, X, ao, aj, z, H, x, C, A, e, f, o, h, al, F, q; i = ".fileinput"; m = "kvFileinputModal"; M = 'style="width:{width};height:{height};"'; N = '<param name="controller" value="true" />\n' + '<param name="allowFullScreen" value="true" />\n' + '<param name="allowScriptAccess" value="always" />\n' + '<param name="autoPlay" value="false" />\n' + '<param name="autoStart" value="false" />\n' + '<param name="quality" value="high" />\n'; l = '<div class="file-preview-other">\n' + '<span class="{previewFileIconClass}">{previewFileIcon}</span>\n' + "</div>"; ak = window.URL || window.webkitURL; k = function (ar, au, at) { return ar !== undefined && (at ? ar === au : ar.match(au)) }; p = function (ar) { if (navigator.appName !== "Microsoft Internet Explorer") { return false } if (ar === 10) { return new RegExp("msie\\s" + ar, "i").test(navigator.userAgent) } var au = document.createElement("div"), at; au.innerHTML = "<!--[if IE " + ar + "]> <i></i> <![endif]-->"; at = au.getElementsByTagName("i").length; document.body.appendChild(au); au.parentNode.removeChild(au); return at }; Q = function (at, av, aw, ar) { var au = ar ? av : av.split(" ").join(i + " ") + i; at.off(au).on(au, aw) }; s = { data: {}, init: function (at) { var ar = at.initialPreview, au = at.id; if (ar.length > 0 && !H(ar)) { ar = ar.split(at.initialPreviewDelimiter) } s.data[au] = { content: ar, config: at.initialPreviewConfig, tags: at.initialPreviewThumbTags, delimiter: at.initialPreviewDelimiter, previewFileType: at.initialPreviewFileType, previewAsData: at.initialPreviewAsData, template: at.previewGenericTemplate, showZoom: at.fileActionSettings.showZoom, showDrag: at.fileActionSettings.showDrag, getSize: function (av) { return at._getSize(av) }, parseTemplate: function (av, aB, aC, aw, ax, az, aA) { var ay = " file-preview-initial"; return at._generatePreviewTemplate(av, aB, aC, aw, ax, false, null, ay, az, aA) }, msg: function (av) { return at._getMsgSelected(av) }, initId: at.previewInitId, footer: at._getLayoutTemplate("footer").replace(/\{progress}/g, at._renderThumbProgress()), isDelete: at.initialPreviewShowDelete, caption: at.initialCaption, actions: function (aw, aA, av, aB, az, ax, ay) { return at._renderFileActions(aw, aA, av, aB, az, ax, ay, true) } } }, fetch: function (ar) { return s.data[ar].content.filter(function (at) { return at !== null }) }, count: function (at, ar) { return !!s.data[at] && !!s.data[at].content ? (ar ? s.data[at].content.length : s.fetch(at).length) : 0 }, get: function (at, ay, aF) { var au = "init_" + ay, ax = s.data[at], av = ax.config[ay], aA = ax.content[ay], aB = ax.initId + "-" + au, aw, ar, aH = " file-preview-initial", aC, aG, aE, aD, az = x("previewAsData", av, ax.previewAsData); aF = aF === undefined ? true : aF; if (!aA) { return "" } if (av && av.frameClass) { aH += " " + av.frameClass } if (az) { aC = ax.previewAsData ? x("type", av, ax.previewFileType || "generic") : "generic"; aG = x("caption", av); aE = s.footer(at, ay, aF, (av && av.size || null)); aD = x("filetype", av, aC); aw = ax.parseTemplate(aC, aA, aG, aD, aB, aE, au, null) } else { aw = ax.template.replace(/\{previewId}/g, aB).replace(/\{frameClass}/g, aH).replace(/\{fileindex}/g, au).replace(/\{content}/g, ax.content[ay]).replace(/\{template}/g, x("type", av, ax.previewFileType)).replace(/\{footer}/g, s.footer(at, ay, aF, (av && av.size || null))) } if (ax.tags.length && ax.tags[ay]) { aw = e(aw, ax.tags[ay]) } if (!z(av) && !z(av.frameAttr)) { ar = R(document.createElement("div")).html(aw); ar.find(".file-preview-initial").attr(av.frameAttr); aw = ar.html(); ar.remove() } return aw }, add: function (ay, aw, av, au, ar) { var ax = R.extend(true, {}, s.data[ay]), at; if (!H(aw)) { aw = aw.split(ax.delimiter) } if (ar) { at = ax.content.push(aw) - 1; ax.config[at] = av; ax.tags[at] = au } else { at = aw.length - 1; ax.content = aw; ax.config = av; ax.tags = au } s.data[ay] = ax; return at }, set: function (az, ax, av, au, ar) { var ay = R.extend(true, {}, s.data[az]), aw, at; if (!ax || !ax.length) { return } if (!H(ax)) { ax = ax.split(ay.delimiter) } at = ax.filter(function (aA) { return aA !== null }); if (!at.length) { return } if (ay.content === undefined) { ay.content = [] } if (ay.config === undefined) { ay.config = [] } if (ay.tags === undefined) { ay.tags = [] } if (ar) { for (aw = 0; aw < ax.length; aw++) { if (ax[aw]) { ay.content.push(ax[aw]) } } for (aw = 0; aw < av.length; aw++) { if (av[aw]) { ay.config.push(av[aw]) } } for (aw = 0; aw < au.length; aw++) { if (au[aw]) { ay.tags.push(au[aw]) } } } else { ay.content = ax; ay.config = av; ay.tags = au } s.data[az] = ay }, unset: function (au, at) { var ar = s.count(au); if (!ar) { return } if (ar === 1) { s.data[au].content = []; s.data[au].config = []; s.data[au].tags = []; return } s.data[au].content[at] = null; s.data[au].config[at] = null; s.data[au].tags[at] = null }, out: function (ax) { var av = "", aw = s.data[ax], at, ar = s.count(ax, true); if (ar === 0) { return { content: "", caption: "" } } for (var au = 0; au < ar; au++) { av += s.get(ax, au) } at = aw.msg(s.count(ax)); return { content: '<div class="file-initial-thumbs">' + av + "</div>", caption: at } }, footer: function (at, aB, aF, aH) { var aA = s.data[at]; aF = aF === undefined ? true : aF; if (aA.config.length === 0 || z(aA.config[aB])) { return "" } var aw = aA.config[aB], aG = x("caption", aw), au = x("width", aw, "auto"), ar = x("url", aw, false), aE = x("key", aw, null), az = x("showDelete", aw, true), aC = x("showZoom", aw, aA.showZoom), av = x("showDrag", aw, aA.showDrag), ay = (ar === false) && aF, ax = aA.isDelete ? aA.actions(false, az, aC, av, ay, ar, aE) : "", aD = aA.footer.replace(/\{actions}/g, ax); return aD.replace(/\{caption}/g, aG).replace(/\{size}/g, aA.getSize(aH)).replace(/\{width}/g, au).replace(/\{indicator}/g, "").replace(/\{indicatorTitle}/g, "") } }; ai = function (ar, at) { at = at || 0; if (typeof ar === "number") { return ar } if (typeof ar === "string") { ar = parseFloat(ar) } return isNaN(ar) ? at : ar }; G = function () { return !!(window.File && window.FileReader) }; am = function () { var ar = document.createElement("div"); return !p(9) && (ar.draggable !== undefined || (ar.ondragstart !== undefined && ar.ondrop !== undefined)) }; I = function () { return G() && window.FormData }; r = function (at, ar) { at.removeClass(ar).addClass(ar) }; Y = { showRemove: true, showUpload: true, showZoom: true, showDrag: true, removeIcon: '<i class="glyphicon glyphicon-trash text-danger"></i>', removeClass: "btn btn-xs btn-default", removeTitle: "Remove file", uploadIcon: '<i class="glyphicon glyphicon-upload text-info"></i>', uploadClass: "btn btn-xs btn-default", uploadTitle: "Upload file", zoomIcon: '<i class="glyphicon glyphicon-zoom-in"></i>', zoomClass: "btn btn-xs btn-default", zoomTitle: "View Details", dragIcon: '<i class="glyphicon glyphicon-menu-hamburger"></i>', dragClass: "text-info", dragTitle: "Move / Rearrange", dragSettings: {}, indicatorNew: '<i class="glyphicon glyphicon-hand-down text-warning"></i>', indicatorSuccess: '<i class="glyphicon glyphicon-ok-sign text-success"></i>', indicatorError: '<i class="glyphicon glyphicon-exclamation-sign text-danger"></i>', indicatorLoading: '<i class="glyphicon glyphicon-hand-up text-muted"></i>', indicatorNewTitle: "Not uploaded yet", indicatorSuccessTitle: "Uploaded", indicatorErrorTitle: "Upload Error", indicatorLoadingTitle: "Uploading ..." }; c = "{preview}\n" + '<div class="kv-upload-progress hide"></div>\n' + '<div class="input-group {class}">\n' + "   {caption}\n" + '   <div class="input-group-btn">\n' + "       {remove}\n" + "       {cancel}\n" + "       {upload}\n" + "       {browse}\n" + "   </div>\n" + "</div>"; b = '{preview}\n<div class="kv-upload-progress hide"></div>\n{remove}\n{cancel}\n{upload}\n{browse}\n'; K = '<div class="file-preview {class}">\n' + "    {close}" + '    <div class="{dropClass}">\n' + '    <div class="file-preview-thumbnails">\n' + "    </div>\n" + '    <div class="clearfix"></div>' + '    <div class="file-preview-status text-center text-success"></div>\n' + '    <div class="kv-fileinput-error"></div>\n' + "    </div>\n" + "</div>"; E = '<div class="close fileinput-remove">&times;</div>\n'; B = '<i class="glyphicon glyphicon-file kv-caption-icon"></i>'; ae = '<div tabindex="500" class="form-control file-caption {class}">\n' + '   <div class="file-caption-name"></div>\n' + "</div>\n"; P = '<button type="{type}" tabindex="500" title="{title}" class="{css}" {status}>{icon} {label}</button>'; d = '<a href="{href}" tabindex="500" title="{title}" class="{css}" {status}>{icon} {label}</a>'; S = '<div tabindex="500" class="{css}" {status}>{icon} {label}</div>'; t = '<div id="' + m + '" class="file-zoom-dialog modal fade" tabindex="-1" aria-labelledby="' + m + 'Label"></div>'; ap = '<div class="modal-dialog modal-lg" role="document">\n' + '  <div class="modal-content">\n' + '    <div class="modal-header">\n' + '      <div class="kv-zoom-actions pull-right">{toggleheader}{fullscreen}{borderless}{close}</div>\n' + '      <h3 class="modal-title">{heading} <small><span class="kv-zoom-title"></span></small></h3>\n' + "    </div>\n" + '    <div class="modal-body">\n' + '      <div class="floating-buttons"></div>\n' + '      <div class="kv-zoom-body file-zoom-content"></div>\n' + "{prev} {next}\n" + "    </div>\n" + "  </div>\n" + "</div>\n"; D = '<div class="progress">\n' + '    <div class="{class}" role="progressbar"' + ' aria-valuenow="{percent}" aria-valuemin="0" aria-valuemax="100" style="width:{percent}%;">\n' + "        {percent}%\n" + "     </div>\n" + "</div>"; u = " <br><samp>({sizeText})</samp>"; aq = '<div class="file-thumbnail-footer">\n' + '    <div class="file-footer-caption" title="{caption}">{caption}{size}</div>\n' + "    {progress} {actions}\n" + "</div>"; ad = '<div class="file-actions">\n' + '    <div class="file-footer-buttons">\n' + "        {upload} {delete} {zoom} {other}" + "    </div>\n" + "    {drag}\n" + '    <div class="file-upload-indicator" title="{indicatorTitle}">{indicator}</div>\n' + '    <div class="clearfix"></div>\n' + "</div>"; J = '<button type="button" class="kv-file-remove {removeClass}" ' + 'title="{removeTitle}" {dataUrl}{dataKey}>{removeIcon}</button>\n'; w = '<button type="button" class="kv-file-upload {uploadClass}" title="{uploadTitle}">' + "{uploadIcon}</button>"; O = '<button type="button" class="kv-file-zoom {zoomClass}" title="{zoomTitle}">{zoomIcon}</button>'; an = '<span class="file-drag-handle {dragClass}" title="{dragTitle}">{dragIcon}</span>'; Z = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}"' + ' data-template="{template}"'; ag = Z + '><div class="kv-file-content">\n'; af = Z + ' title="{caption}" ' + M + '><div class="kv-file-content">\n'; y = "</div>{footer}\n</div>\n"; n = "{content}\n"; W = '<div class="kv-preview-data file-preview-html" title="{caption}" ' + M + ">{data}</div>\n"; ab = '<img src="{data}" class="kv-preview-data file-preview-image" title="{caption}" alt="{caption}" ' + M + ">\n"; V = '<textarea class="kv-preview-data file-preview-text" title="{caption}" readonly ' + M + ">{data}</textarea>\n"; aa = '<video class="kv-preview-data" width="{width}" height="{height}" controls>\n' + '<source src="{data}" type="{type}">\n' + l + "\n</video>\n"; g = '<audio class="kv-preview-data" controls>\n<source src="' + "{data}" + '" type="{type}">\n' + l + "\n</audio>\n"; j = '<object class="kv-preview-data file-object" type="application/x-shockwave-flash" ' + 'width="{width}" height="{height}" data="{data}">\n' + N + " " + l + "\n</object>\n"; L = '<object class="kv-preview-data file-object" data="{data}" type="{type}" width="{width}" height="{height}">\n' + '<param name="movie" value="{caption}" />\n' + N + " " + l + "\n</object>\n"; T = '<embed class="kv-preview-data" src="{data}" width="{width}" height="{height}" type="application/pdf">\n'; U = '<div class="kv-preview-data file-preview-other-frame">\n' + l + "\n</div>\n"; a = { main1: c, main2: b, preview: K, close: E, fileIcon: B, caption: ae, modalMain: t, modal: ap, progress: D, size: u, footer: aq, actions: ad, actionDelete: J, actionUpload: w, actionZoom: O, actionDrag: an, btnDefault: P, btnLink: d, btnBrowse: S }; ac = { generic: ag + n + y, html: ag + W + y, image: ag + ab + y, text: ag + V + y, video: af + aa + y, audio: af + g + y, flash: af + j + y, object: af + L + y, pdf: af + T + y, other: af + U + y }; ah = ["image", "html", "text", "video", "audio", "flash", "pdf", "object"]; ao = { image: { width: "auto", height: "160px" }, html: { width: "213px", height: "160px" }, text: { width: "213px", height: "160px" }, video: { width: "213px", height: "160px" }, audio: { width: "213px", height: "80px" }, flash: { width: "213px", height: "160px" }, object: { width: "160px", height: "160px" }, pdf: { width: "160px", height: "160px" }, other: { width: "160px", height: "160px" } }; v = { image: { width: "100%", height: "100%" }, html: { width: "100%", height: "100%", "min-height": "480px" }, text: { width: "100%", height: "100%", "min-height": "480px" }, video: { width: "auto", height: "100%", "max-width": "100%" }, audio: { width: "100%", height: "30px" }, flash: { width: "auto", height: "480px" }, object: { width: "auto", height: "100%", "min-height": "480px" }, pdf: { width: "100%", height: "100%", "min-height": "480px" }, other: { width: "auto", height: "100%", "min-height": "480px" } }; aj = { image: function (at, ar) { return k(at, "image.*") || k(ar, /\.(gif|png|jpe?g)$/i) }, html: function (at, ar) { return k(at, "text/html") || k(ar, /\.(htm|html)$/i) }, text: function (at, ar) { return k(at, "text.*") || k(ar, /\.(xml|javascript)$/i) || k(ar, /\.(txt|md|csv|nfo|ini|json|php|js|css)$/i) }, video: function (at, ar) { return k(at, "video.*") && (k(at, /(ogg|mp4|mp?g|webm|3gp)$/i) || k(ar, /\.(og?|mp4|webm|mp?g|3gp)$/i)) }, audio: function (at, ar) { return k(at, "audio.*") && (k(ar, /(ogg|mp3|mp?g|wav)$/i) || k(ar, /\.(og?|mp3|mp?g|wav)$/i)) }, flash: function (at, ar) { return k(at, "application/x-shockwave-flash", true) || k(ar, /\.(swf)$/i) }, pdf: function (at, ar) { return k(at, "application/pdf", true) || k(ar, /\.(pdf)$/i) }, object: function () { return true }, other: function () { return true } }; z = function (at, ar) { return at === undefined || at === null || at.length === 0 || (ar && R.trim(at) === "") }; H = function (ar) { return Array.isArray(ar) || Object.prototype.toString.call(ar) === "[object Array]" }; x = function (au, at, ar) { ar = ar || ""; return (at && typeof at === "object" && au in at) ? at[au] : ar }; X = function (ar, au, at) { return (z(ar) || z(ar[au])) ? at : R(ar[au]) }; C = function () { return Math.round(new Date().getTime() + (Math.random() * 100)) }; A = function (ar) { return ar.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;") }; e = function (au, at) { var ar = au; if (!at) { return ar } R.each(at, function (av, aw) { if (typeof aw === "function") { aw = aw() } ar = ar.split(av).join(aw) }); return ar }; f = function (at) { var ar = at.is("img") ? at.attr("src") : at.find("source").attr("src"); ak.revokeObjectURL(ar) }; o = function (ar) { var at = ar.lastIndexOf("/"); if (at === -1) { at = ar.lastIndexOf("\\") } return ar.split(ar.substring(at, at + 1)).pop() }; h = function () { return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement }; al = function (ar) { if (ar && !h()) { if (document.documentElement.requestFullscreen) { document.documentElement.requestFullscreen() } else { if (document.documentElement.msRequestFullscreen) { document.documentElement.msRequestFullscreen() } else { if (document.documentElement.mozRequestFullScreen) { document.documentElement.mozRequestFullScreen() } else { if (document.documentElement.webkitRequestFullscreen) { document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT) } } } } } else { if (document.exitFullscreen) { document.exitFullscreen() } else { if (document.msExitFullscreen) { document.msExitFullscreen() } else { if (document.mozCancelFullScreen) { document.mozCancelFullScreen() } else { if (document.webkitExitFullscreen) { document.webkitExitFullscreen() } } } } } }; F = function (ar, av, au) { if (au >= ar.length) { var at = au - ar.length; while ((at--) + 1) { ar.push(undefined) } } ar.splice(au, 0, ar.splice(av, 1)[0]); return ar }; q = function (au, at) { var ar = this; ar.$element = R(au); if (!ar._validate()) { return } ar.isPreviewable = G(); ar.isIE9 = p(9); ar.isIE10 = p(10); if (ar.isPreviewable || ar.isIE9) { ar._init(at); ar._listen() } else { ar.$element.removeClass("file-loading") } }; q.prototype = { constructor: q, _init: function (at) { var ar = this, av = ar.$element, au; R.each(at, function (aw, ax) { switch (aw) { case "minFileCount": case "maxFileCount": case "maxFileSize": ar[aw] = ai(ax); break; default: ar[aw] = ax; break } }); ar.fileInputCleared = false; ar.fileBatchCompleted = true; if (!ar.isPreviewable) { ar.showPreview = false } ar.uploadFileAttr = !z(av.attr("name")) ? av.attr("name") : "file_data"; ar.reader = null; ar.formdata = {}; ar.clearStack(); ar.uploadCount = 0; ar.uploadStatus = {}; ar.uploadLog = []; ar.uploadAsyncCount = 0; ar.loadedImages = []; ar.totalImagesCount = 0; ar.ajaxRequests = []; ar.isError = false; ar.ajaxAborted = false; ar.cancelling = false; au = ar._getLayoutTemplate("progress"); ar.progressTemplate = au.replace("{class}", ar.progressClass); ar.progressCompleteTemplate = au.replace("{class}", ar.progressCompleteClass); ar.progressErrorTemplate = au.replace("{class}", ar.progressErrorClass); ar.dropZoneEnabled = am() && ar.dropZoneEnabled; ar.isDisabled = ar.$element.attr("disabled") || ar.$element.attr("readonly"); ar.isUploadable = I() && !z(ar.uploadUrl); ar.isClickable = ar.browseOnZoneClick && ar.showPreview && (ar.isUploadable && ar.dropZoneEnabled || !z(ar.defaultPreviewContent)); ar.slug = typeof at.slugCallback === "function" ? at.slugCallback : ar._slugDefault; ar.mainTemplate = ar.showCaption ? ar._getLayoutTemplate("main1") : ar._getLayoutTemplate("main2"); ar.captionTemplate = ar._getLayoutTemplate("caption"); ar.previewGenericTemplate = ar._getPreviewTemplate("generic"); if (ar.resizeImage && (ar.maxImageWidth || ar.maxImageHeight)) { ar.imageCanvas = document.createElement("canvas"); ar.imageCanvasContext = ar.imageCanvas.getContext("2d") } if (z(ar.$element.attr("id"))) { ar.$element.attr("id", C()) } if (ar.$container === undefined) { ar.$container = ar._createContainer() } else { ar._refreshContainer() } ar.$dropZone = ar.$container.find(".file-drop-zone"); ar.$progress = ar.$container.find(".kv-upload-progress"); ar.$btnUpload = ar.$container.find(".fileinput-upload"); ar.$captionContainer = X(at, "elCaptionContainer", ar.$container.find(".file-caption")); ar.$caption = X(at, "elCaptionText", ar.$container.find(".file-caption-name")); ar.$previewContainer = X(at, "elPreviewContainer", ar.$container.find(".file-preview")); ar.$preview = X(at, "elPreviewImage", ar.$container.find(".file-preview-thumbnails")); ar.$previewStatus = X(at, "elPreviewStatus", ar.$container.find(".file-preview-status")); ar.$errorContainer = X(at, "elErrorContainer", ar.$previewContainer.find(".kv-fileinput-error")); if (!z(ar.msgErrorClass)) { r(ar.$errorContainer, ar.msgErrorClass) } ar.$errorContainer.hide(); ar.fileActionSettings = R.extend(true, Y, at.fileActionSettings); ar.previewInitId = "preview-" + C(); ar.id = ar.$element.attr("id"); s.init(ar); ar._initPreview(true); ar._initPreviewActions(); ar.options = at; ar._setFileDropZoneTitle(); ar.$element.removeClass("file-loading"); if (ar.$element.attr("disabled")) { ar.disable() } ar._initZoom() }, _validate: function () { var at = this, ar; if (at.$element.attr("type") === "file") { return true } ar = '<div class="help-block alert alert-warning">' + "<h4>Invalid Input Type</h4>" + "You must set an input <code>type = file</code> for <b>bootstrap-fileinput</b> plugin to initialize." + "</div>"; at.$element.after(ar); return false }, _errorsExist: function () { var ar = this, at; if (ar.$errorContainer.find("li").length) { return true } at = R(document.createElement("div")).html(ar.$errorContainer.html()); at.find("span.kv-error-close").remove(); at.find("ul").remove(); return R.trim(at.text()).length ? true : false }, _errorHandler: function (ar, au) { var at = this, av = ar.target.error; if (av.code === av.NOT_FOUND_ERR) { at._showError(at.msgFileNotFound.replace("{name}", au)) } else { if (av.code === av.SECURITY_ERR) { at._showError(at.msgFileSecured.replace("{name}", au)) } else { if (av.code === av.NOT_READABLE_ERR) { at._showError(at.msgFileNotReadable.replace("{name}", au)) } else { if (av.code === av.ABORT_ERR) { at._showError(at.msgFilePreviewAborted.replace("{name}", au)) } else { at._showError(at.msgFilePreviewError.replace("{name}", au)) } } } } }, _addError: function (au) { var at = this, ar = at.$errorContainer; if (au && ar.length) { ar.html(at.errorCloseButton + au); Q(ar.find(".kv-error-close"), "click", function () { ar.fadeOut("slow") }) } }, _resetErrors: function (au) { var at = this, ar = at.$errorContainer; at.isError = false; at.$container.removeClass("has-error"); ar.html(""); if (au) { ar.fadeOut("slow") } else { ar.hide() } }, _showFolderError: function (au) { var at = this, ar = at.$errorContainer, av; if (!au) { return } av = at.msgFoldersNotAllowed.replace(/\{n}/g, au); at._addError(av); r(at.$container, "has-error"); ar.fadeIn(800); at._raise("filefoldererror", [au, av]) }, _showUploadError: function (ay, ax, av) { var at = this, ar = at.$errorContainer, au = av || "fileuploaderror", aw = ax && ax.id ? '<li data-file-id="' + ax.id + '">' + ay + "</li>" : "<li>" + ay + "</li>"; if (ar.find("ul").length === 0) { at._addError("<ul>" + aw + "</ul>") } else { ar.find("ul").append(aw) } ar.fadeIn(800); at._raise(au, [ax, ay]); at.$container.removeClass("file-input-new"); r(at.$container, "has-error"); return true }, _showError: function (ax, aw, av) { var at = this, ar = at.$errorContainer, au = av || "fileerror"; aw = aw || {}; aw.reader = at.reader; at._addError(ax); ar.fadeIn(800); at._raise(au, [aw, ax]); if (!at.isUploadable) { at._clearFileInput() } at.$container.removeClass("file-input-new"); r(at.$container, "has-error"); at.$btnUpload.attr("disabled", true); return true }, _noFilesError: function (aw) { var at = this, au = at.minFileCount > 1 ? at.filePlural : at.fileSingle, av = at.msgFilesTooLess.replace("{n}", at.minFileCount).replace("{files}", au), ar = at.$errorContainer; at._addError(av); at.isError = true; at._updateFileDetails(0); ar.fadeIn(800); at._raise("fileerror", [aw, av]); at._clearFileInput(); r(at.$container, "has-error") }, _parseError: function (av, aw, ay) { var at = this, au = R.trim(aw + ""), ar = au.slice(-1) === "." ? "" : ".", ax = av.responseJSON !== undefined && av.responseJSON.error !== undefined ? av.responseJSON.error : av.responseText; if (at.cancelling && at.msgUploadAborted) { au = at.msgUploadAborted } if (at.showAjaxErrorDetails && ax) { ax = R.trim(ax.replace(/\n\s*\n/g, "\n")); ax = ax.length > 0 ? "<pre>" + ax + "</pre>" : ""; au += ar + ax } else { au += ar } at.cancelling = false; return ay ? "<b>" + ay + ": </b>" + au : au }, _parseFileType: function (av) { var at = this, ax, aw, ar, au; for (au = 0; au < ah.length; au += 1) { ar = ah[au]; ax = x(ar, at.fileTypeSettings, aj[ar]); aw = ax(av.type, av.name) ? ar : ""; if (!z(aw)) { return aw } } return "other" }, _parseFilePreviewIcon: function (av, ax) { var ar = this, au, at, aw = ar.previewFileIcon; if (ax && ax.indexOf(".") > -1) { at = ax.split(".").pop(); if (ar.previewFileIconSettings && ar.previewFileIconSettings[at]) { aw = ar.previewFileIconSettings[at] } if (ar.previewFileExtSettings) { R.each(ar.previewFileExtSettings, function (ay, az) { if (ar.previewFileIconSettings[ay] && az(at)) { aw = ar.previewFileIconSettings[ay]; return } au = true }) } } if (av.indexOf("{previewFileIcon}") > -1) { return av.replace(/\{previewFileIconClass}/g, ar.previewFileIconClass).replace(/\{previewFileIcon}/g, aw) } return av }, _raise: function (at, av) { var ar = this, au = R.Event(at); if (av !== undefined) { ar.$element.trigger(au, av) } else { ar.$element.trigger(au) } if (au.isDefaultPrevented()) { return false } if (!au.result) { return au.result } switch (at) { case "filebatchuploadcomplete": case "filebatchuploadsuccess": case "fileuploaded": case "fileclear": case "filecleared": case "filereset": case "fileerror": case "filefoldererror": case "fileuploaderror": case "filebatchuploaderror": case "filedeleteerror": case "filecustomerror": case "filesuccessremove": break; default: ar.ajaxAborted = au.result; break } return true }, _listenFullScreen: function (ar) { var at = this, au = at.$modal, av, aw; if (!au || !au.length) { return } av = au && au.find(".btn-fullscreen"); aw = au && au.find(".btn-borderless"); if (!av.length || !aw.length) { return } av.removeClass("active").attr("aria-pressed", "false"); aw.removeClass("active").attr("aria-pressed", "false"); if (ar) { av.addClass("active").attr("aria-pressed", "true") } else { aw.addClass("active").attr("aria-pressed", "true") } if (au.hasClass("file-zoom-fullscreen")) { at._maximizeZoomDialog() } else { if (ar) { at._maximizeZoomDialog() } else { aw.removeClass("active").attr("aria-pressed", "false") } } }, _listen: function () { var at = this, au = at.$element, ar = au.closest("form"), av = at.$container; Q(au, "change", R.proxy(at._change, at)); if (at.showBrowse) { Q(at.$btnFile, "click", R.proxy(at._browse, at)) } Q(ar, "reset", R.proxy(at.reset, at)); Q(av.find(".fileinput-remove:not([disabled])"), "click", R.proxy(at.clear, at)); Q(av.find(".fileinput-cancel"), "click", R.proxy(at.cancel, at)); at._initDragDrop(); if (!at.isUploadable) { Q(ar, "submit", R.proxy(at._submitForm, at)) } Q(at.$container.find(".fileinput-upload"), "click", R.proxy(at._uploadClick, at)); Q(R(window), "resize", function () { at._listenFullScreen(screen.width === window.innerWidth && screen.height === window.innerHeight) }); Q(R(document), "webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange", function () { at._listenFullScreen(h()) }); at._initClickable() }, _initClickable: function () { var ar = this, at; if (!ar.isClickable) { return } at = ar.isUploadable ? ar.$dropZone : ar.$preview.find(".file-default-preview"); r(at, "clickable"); at.attr("tabindex", -1); Q(at, "click", function (av) { var au = R(av.target); if (!au.parents(".file-preview-thumbnails").length || au.parents(".file-default-preview").length) { ar.$element.trigger("click"); at.blur() } }) }, _initDragDrop: function () { var ar = this, at = ar.$dropZone; if (ar.isUploadable && ar.dropZoneEnabled && ar.showPreview) { Q(at, "dragenter dragover", R.proxy(ar._zoneDragEnter, ar)); Q(at, "dragleave", R.proxy(ar._zoneDragLeave, ar)); Q(at, "drop", R.proxy(ar._zoneDrop, ar)); Q(R(document), "dragenter dragover drop", ar._zoneDragDropInit) } }, _zoneDragDropInit: function (ar) { ar.stopPropagation(); ar.preventDefault() }, _zoneDragEnter: function (au) { var ar = this, at = R.inArray("Files", au.originalEvent.dataTransfer.types) > -1; ar._zoneDragDropInit(au); if (ar.isDisabled || !at) { au.originalEvent.dataTransfer.effectAllowed = "none"; au.originalEvent.dataTransfer.dropEffect = "none"; return } r(ar.$dropZone, "file-highlighted") }, _zoneDragLeave: function (at) { var ar = this; ar._zoneDragDropInit(at); if (ar.isDisabled) { return } ar.$dropZone.removeClass("file-highlighted") }, _zoneDrop: function (at) { var ar = this; at.preventDefault(); if (ar.isDisabled || z(at.originalEvent.dataTransfer.files)) { return } ar._change(at, "dragdrop"); ar.$dropZone.removeClass("file-highlighted") }, _uploadClick: function (aw) { var at = this, av = at.$container.find(".fileinput-upload"), ar, au = !av.hasClass("disabled") && z(av.attr("disabled")); if (aw && aw.isDefaultPrevented()) { return } if (!at.isUploadable) { if (au && av.attr("type") !== "submit") { ar = av.closest("form"); if (ar.length) { ar.trigger("submit") } aw.preventDefault() } return } aw.preventDefault(); if (au) { at.upload() } }, _submitForm: function () { var ar = this, at = ar.$element, au = at.get(0).files; if (au && ar.minFileCount > 0 && ar._getFileCount(au.length) < ar.minFileCount) { ar._noFilesError({}); return false } return !ar._abort({}) }, _clearPreview: function () { var ar = this, at = !ar.showUploadedThumbs ? ar.$preview.find(".file-preview-frame") : ar.$preview.find(".file-preview-frame:not(.file-preview-success)"); at.remove(); if (!ar.$preview.find(".file-preview-frame").length || !ar.showPreview) { ar._resetUpload() } ar._validateDefaultPreview() }, _initSortable: function () { var ar = this, av = ar.$preview, at, au; if (!window.KvSortable) { return } at = av.find(".file-initial-thumbs"); au = { handle: ".drag-handle-init", dataIdAttr: "data-preview-id", draggable: ".file-preview-initial", onSort: function (ax) { var ay = ax.oldIndex, aw = ax.newIndex; ar.initialPreview = F(ar.initialPreview, ay, aw); ar.initialPreviewConfig = F(ar.initialPreviewConfig, ay, aw); s.init(ar); ar._raise("filesorted", { previewId: R(ax.item).attr("id"), "oldIndex": ay, "newIndex": aw, stack: ar.initialPreviewConfig }) } }; if (at.data("kvsortable")) { at.kvsortable("destroy") } R.extend(true, au, ar.fileActionSettings.dragSettings); at.kvsortable(au) }, _initPreview: function (av) { var ar = this, au = ar.initialCaption || "", at; if (!s.count(ar.id)) { ar._clearPreview(); if (av) { ar._setCaption(au) } else { ar._initCaption() } return } at = s.out(ar.id); au = av && ar.initialCaption ? ar.initialCaption : at.caption; ar.$preview.html(at.content); ar._setCaption(au); ar._initSortable(); if (!z(at.content)) { ar.$container.removeClass("file-input-new") } }, _getZoomButton: function (av) { var ar = this, at = ar.previewZoomButtonIcons[av], au = ar.previewZoomButtonClasses[av], ax = ' title="' + (ar.previewZoomButtonTitles[av] || "") + '" ', aw = ax + (av === "close" ? ' data-dismiss="modal" aria-hidden="true"' : ""); if (av === "fullscreen" || av === "borderless" || av === "toggleheader") { aw += ' data-toggle="button" aria-pressed="false" autocomplete="off"' } return '<button type="button" class="' + au + " btn-" + av + '"' + aw + ">" + at + "</button>" }, _getModalContent: function () { var ar = this; return ar._getLayoutTemplate("modal").replace(/\{heading}/g, ar.msgZoomModalHeading).replace(/\{prev}/g, ar._getZoomButton("prev")).replace(/\{next}/g, ar._getZoomButton("next")).replace(/\{toggleheader}/g, ar._getZoomButton("toggleheader")).replace(/\{fullscreen}/g, ar._getZoomButton("fullscreen")).replace(/\{borderless}/g, ar._getZoomButton("borderless")).replace(/\{close}/g, ar._getZoomButton("close")) }, _listenModalEvent: function (au) { var ar = this, at = ar.$modal, av = function (aw) { return { sourceEvent: aw, previewId: at.data("previewId"), modal: at } }; at.on(au + ".bs.modal", function (ax) { var aw = at.find(".btn-fullscreen"), ay = at.find(".btn-borderless"); ar._raise("filezoom" + au, av(ax)); if (au === "shown") { ay.removeClass("active").attr("aria-pressed", "false"); aw.removeClass("active").attr("aria-pressed", "false"); if (at.hasClass("file-zoom-fullscreen")) { ar._maximizeZoomDialog(); if (h()) { aw.addClass("active").attr("aria-pressed", "true") } else { ay.addClass("active").attr("aria-pressed", "true") } } } }) }, _initZoom: function () { var au = this, av, at = au._getLayoutTemplate("modalMain"), ar = "#" + m; au.$modal = R(ar); if (!au.$modal || !au.$modal.length) { av = R(document.createElement("div")).html(at).insertAfter(au.$container); au.$modal = R("#" + m).insertBefore(av); av.remove() } au.$modal.html(au._getModalContent()); au._listenModalEvent("show"); au._listenModalEvent("shown"); au._listenModalEvent("hide"); au._listenModalEvent("hidden"); au._listenModalEvent("loaded") }, _initZoomButtons: function () { var ax = this, au = ax.$modal.data("previewId") || "", ay, aw, az = ax.$preview.find(".file-preview-frame").toArray(), ar = az.length, av = ax.$modal.find(".btn-prev"), at = ax.$modal.find(".btn-next"); if (!ar) { return } ay = R(az[0]); aw = R(az[ar - 1]); av.removeAttr("disabled"); at.removeAttr("disabled"); if (ay.length && ay.attr("id") === au) { av.attr("disabled", true) } if (aw.length && aw.attr("id") === au) { at.attr("disabled", true) } }, _maximizeZoomDialog: function () { var au = this, av = au.$modal, at = av.find(".modal-header:visible"), ar = av.find(".modal-footer:visible"), ax = av.find(".modal-body"), aw = R(window).height(), ay = 0; av.addClass("file-zoom-fullscreen"); if (at && at.length) { aw -= at.outerHeight(true) } if (ar && ar.length) { aw -= ar.outerHeight(true) } if (ax && ax.length) { ay = ax.outerHeight(true) - ax.height(); aw -= ay } av.find(".kv-zoom-body").height(aw) }, _resizeZoomDialog: function (au) { var ar = this, at = ar.$modal, av = at.find(".btn-fullscreen"), aw = at.find(".btn-borderless"); if (at.hasClass("file-zoom-fullscreen")) { al(false); if (!au) { if (!av.hasClass("active")) { at.removeClass("file-zoom-fullscreen"); ar.$modal.find(".kv-zoom-body").css("height", ar.zoomModalHeight) } else { av.removeClass("active").attr("aria-pressed", "false") } } else { if (!av.hasClass("active")) { at.removeClass("file-zoom-fullscreen"); ar._resizeZoomDialog(true); if (aw.hasClass("active")) { aw.removeClass("active").attr("aria-pressed", "false") } } } } else { if (!au) { ar._maximizeZoomDialog(); return } al(true) } at.focus() }, _setZoomContent: function (aC, av) { var aD = this, au, ar, aA, aJ, aF, ax, aI, at = aC.attr("id"), az = aD.$modal, aG = az.find(".btn-prev"), aH = az.find(".btn-next"), aw, ay = az.find(".btn-fullscreen"), aE = az.find(".btn-borderless"), aB = az.find(".btn-toggleheader"); ar = aC.data("template") || "generic"; au = aC.find(".kv-file-content"); aA = au.length ? au.html() : ""; aJ = aC.find(".file-footer-caption").text() || ""; az.find(".kv-zoom-title").html(aJ); aF = az.find(".kv-zoom-body"); if (av) { aw = aF.clone().insertAfter(aF); aF.html(aA).hide(); aw.fadeOut("fast", function () { aF.fadeIn("fast"); aw.remove() }) } else { aF.html(aA) } aI = aD.previewZoomSettings[ar]; if (aI) { ax = aF.find(".kv-preview-data"); r(ax, "file-zoom-detail"); R.each(aI, function (aK, aL) { ax.css(aK, aL); if ((ax.attr("width") && aK === "width") || (ax.attr("height") && aK === "height")) { ax.removeAttr(aK) } }) } az.data("previewId", at); Q(aG, "click", function () { aD._zoomSlideShow("prev", at) }); Q(aH, "click", function () { aD._zoomSlideShow("next", at) }); Q(ay, "click", function () { aD._resizeZoomDialog(true) }); Q(aE, "click", function () { aD._resizeZoomDialog(false) }); Q(aB, "click", function () { var aK = az.find(".modal-header"), aO = az.find(".modal-body .floating-buttons"), aM, aN = aK.find(".kv-zoom-actions"), aL = function (aP) { var aR = aD.$modal.find(".kv-zoom-body"), aQ = aD.zoomModalHeight; if (az.hasClass("file-zoom-fullscreen")) { aQ = aR.outerHeight(true); if (!aP) { aQ = aQ - aK.outerHeight(true) } } aR.css("height", aP ? aQ + aP : aQ) }; if (aK.is(":visible")) { aM = aK.outerHeight(true); aK.slideUp("slow", function () { aN.find(".btn").appendTo(aO); aL(aM) }) } else { aO.find(".btn").appendTo(aN); aK.slideDown("slow", function () { aL() }) } az.focus() }); Q(az, "keydown", function (aL) { var aK = aL.which || aL.keyCode; if (aK === 37 && !aG.attr("disabled")) { aD._zoomSlideShow("prev", at) } if (aK === 39 && !aH.attr("disabled")) { aD._zoomSlideShow("next", at) } }) }, _zoomPreview: function (at) { var ar = this, au; if (!at.length) { throw "Cannot zoom to detailed preview!" } ar.$modal.html(ar._getModalContent()); au = at.closest(".file-preview-frame"); ar._setZoomContent(au); ar.$modal.modal("show"); ar._initZoomButtons() }, _zoomSlideShow: function (ar, aw) { var az = this, ay = az.$modal.find(".kv-zoom-actions .btn-" + ar), aA, au, ax = az.$preview.find(".file-preview-frame").toArray(), av = ax.length, at; if (ay.attr("disabled")) { return } for (au = 0; au < av; au++) { if (R(ax[au]).attr("id") === aw) { at = ar === "prev" ? au - 1 : au + 1; break } } if (at < 0 || at >= av || !ax[at]) { return } aA = R(ax[at]); if (aA.length) { az._setZoomContent(aA, true) } az._initZoomButtons(); az._raise("filezoom" + ar, { "previewId": aw, modal: az.$modal }) }, _initZoomButton: function () { var ar = this; ar.$preview.find(".kv-file-zoom").each(function () { var at = R(this); Q(at, "click", function () { ar._zoomPreview(at) }) }) }, _initPreviewActions: function () { var at = this, ar = at.deleteExtraData || {}, au = function () { var av = at.isUploadable ? s.count(at.id) : at.$element.get(0).files.length; if (at.$preview.find(".kv-file-remove").length === 0 && !av) { at.reset(); at.initialCaption = "" } }; at._initZoomButton(); at.$preview.find(".kv-file-remove").each(function () { var aE = R(this), aC = aE.data("url") || at.deleteUrl, aw = aE.data("key"); if (z(aC) || aw === undefined) { return } var ax = aE.closest(".file-preview-frame"), av = s.data[at.id], aA, aB, aD = ax.data("fileindex"), ay, az; aD = parseInt(aD.replace("init_", "")); ay = z(av.config) && z(av.config[aD]) ? null : av.config[aD]; az = z(ay) || z(ay.extra) ? ar : ay.extra; if (typeof az === "function") { az = az() } aB = { id: aE.attr("id"), key: aw, extra: az }; aA = R.extend(true, {}, { url: aC, type: "POST", dataType: "json", data: R.extend(true, {}, { key: aw }, az), beforeSend: function (aF) { at.ajaxAborted = false; at._raise("filepredelete", [aw, aF, az]); if (at.ajaxAborted) { aF.abort() } else { r(ax, "file-uploading"); r(aE, "disabled") } }, success: function (aH, aJ, aG) { var aI, aF; if (z(aH) || z(aH.error)) { s.unset(at.id, aD); aI = s.count(at.id); aF = aI > 0 ? at._getMsgSelected(aI) : ""; at._raise("filedeleted", [aw, aG, az]); at._setCaption(aF) } else { aB.jqXHR = aG; aB.response = aH; at._showError(aH.error, aB, "filedeleteerror"); ax.removeClass("file-uploading"); aE.removeClass("disabled"); au(); return } ax.removeClass("file-uploading").addClass("file-deleted"); ax.fadeOut("slow", function () { at._clearObjects(ax); ax.remove(); au(); if (!aI && at.getFileStack().length === 0) { at._setCaption(""); at.reset() } }) }, error: function (aG, aI, aH) { var aF = at._parseError(aG, aH); aB.jqXHR = aG; aB.response = {}; at._showError(aF, aB, "filedeleteerror"); ax.removeClass("file-uploading"); au() } }, at.ajaxDeleteSettings); Q(aE, "click", function () { if (!at._validateMinCount()) { return false } R.ajax(aA) }) }) }, _clearObjects: function (ar) { ar.find("video audio").each(function () { this.pause(); R(this).remove() }); ar.find("img object div").each(function () { R(this).remove() }) }, _clearFileInput: function () { var au = this, av = au.$element, aw, ar, at; if (z(av.val())) { return } if (au.isIE9 || au.isIE10) { aw = av.closest("form"); ar = R(document.createElement("form")); at = R(document.createElement("div")); av.before(at); if (aw.length) { aw.after(ar) } else { at.after(ar) } ar.append(av).trigger("reset"); at.before(av).remove(); ar.remove() } else { av.val("") } au.fileInputCleared = true }, _resetUpload: function () { var ar = this; ar.uploadCache = { content: [], config: [], tags: [], append: true }; ar.uploadCount = 0; ar.uploadStatus = {}; ar.uploadLog = []; ar.uploadAsyncCount = 0; ar.loadedImages = []; ar.totalImagesCount = 0; ar.$btnUpload.removeAttr("disabled"); ar._setProgress(0); r(ar.$progress, "hide"); ar._resetErrors(false); ar.ajaxAborted = false; ar.ajaxRequests = []; ar._resetCanvas() }, _resetCanvas: function () { var ar = this; if (ar.canvas && ar.imageCanvasContext) { ar.imageCanvasContext.clearRect(0, 0, ar.canvas.width, ar.canvas.height) } }, _hasInitialPreview: function () { var ar = this; return !ar.overwriteInitial && s.count(ar.id) }, _resetPreview: function () { var ar = this, at, au; if (s.count(ar.id)) { at = s.out(ar.id); ar.$preview.html(at.content); au = ar.initialCaption ? ar.initialCaption : at.caption; ar._setCaption(au) } else { ar._clearPreview(); ar._initCaption() } if (ar.showPreview) { ar._initZoom(); ar._initSortable() } }, _clearDefaultPreview: function () { var ar = this; ar.$preview.find(".file-default-preview").remove() }, _validateDefaultPreview: function () { var ar = this; if (!ar.showPreview || z(ar.defaultPreviewContent)) { return } ar.$preview.html('<div class="file-default-preview">' + ar.defaultPreviewContent + "</div>"); ar.$container.removeClass("file-input-new"); ar._initClickable() }, _resetPreviewThumbs: function (au) { var ar = this, at; if (au) { ar._clearPreview(); ar.clearStack(); return } if (ar._hasInitialPreview()) { at = s.out(ar.id); ar.$preview.html(at.content); ar._setCaption(at.caption); ar._initPreviewActions() } else { ar._clearPreview() } }, _getLayoutTemplate: function (at) { var ar = this, au = x(at, ar.layoutTemplates, a[at]); if (z(ar.customLayoutTags)) { return au } return e(au, ar.customLayoutTags) }, _getPreviewTemplate: function (at) { var ar = this, au = x(at, ar.previewTemplates, ac[at]); if (z(ar.customPreviewTags)) { return au } return e(au, ar.customPreviewTags) }, _getOutData: function (au, at, av) { var ar = this; au = au || {}; at = at || {}; av = av || ar.filestack.slice(0) || {}; return { form: ar.formdata, files: av, filenames: ar.filenames, filescount: ar.getFilesCount(), extra: ar._getExtraData(), response: at, reader: ar.reader, jqXHR: au } }, _getMsgSelected: function (au) { var ar = this, at = au === 1 ? ar.fileSingle : ar.filePlural; return au > 0 ? ar.msgSelected.replace("{n}", au).replace("{files}", at) : ar.msgNoFilesSelected }, _getThumbs: function (ar) { ar = ar || ""; return this.$preview.find(".file-preview-frame:not(.file-preview-initial)" + ar) }, _getExtraData: function (ar, au) { var at = this, av = at.uploadExtraData; if (typeof at.uploadExtraData === "function") { av = at.uploadExtraData(ar, au) } return av }, _initXhr: function (au, ar, av) { var at = this; if (au.upload) { au.upload.addEventListener("progress", function (ay) { var az = 0, ax = ay.total, aw = ay.loaded || ay.position; if (ay.lengthComputable) { az = Math.floor(aw / ax * 100) } if (ar) { at._setAsyncUploadStatus(ar, az, av) } else { at._setProgress(az) } }, false) } return au }, _ajaxSubmit: function (aw, ay, az, au, ar, av) { var at = this, ax; at._raise("filepreajax", [ar, av]); at._uploadExtra(ar, av); ax = R.extend(true, {}, { xhr: function () { var aA = R.ajaxSettings.xhr(); return at._initXhr(aA, ar, at.getFileStack().length) }, url: at.uploadUrl, type: "POST", dataType: "json", data: at.formdata, cache: false, processData: false, contentType: false, beforeSend: aw, success: ay, complete: az, error: au }, at.ajaxSettings); at.ajaxRequests.push(R.ajax(ax)) }, _initUploadSuccess: function (aw, aD, ar) { var aB = this, at, ay, az, aE, aA, au, aC, ax, av = function (aG, aF) { if (!(aB[aG] instanceof Array)) { aB[aG] = [] } if (aF && aF.length) { aB[aG] = aB[aG].concat(aF) } }; if (!aB.showPreview || typeof aw !== "object" || R.isEmptyObject(aw)) { return } if (aw.initialPreview !== undefined && aw.initialPreview.length > 0) { aB.hasInitData = true; aA = aw.initialPreview || []; au = aw.initialPreviewConfig || []; aC = aw.initialPreviewThumbTags || []; at = aw.append === undefined || aw.append ? true : false; if (aA.length > 0 && !H(aA)) { aA = aA.split(aB.initialPreviewDelimiter) } aB.overwriteInitial = false; av("initialPreview", aA); av("initialPreviewConfig", au); av("initialPreviewThumbTags", aC); if (aD !== undefined) { if (!ar) { az = s.add(aB.id, aA, au[0], aC[0], at); ay = s.get(aB.id, az, false); aE = R(ay).hide(); aD.after(aE).fadeOut("slow", function () { aE.fadeIn("slow").css("display:inline-block"); aB._initPreviewActions(); aB._clearFileInput(); aD.remove() }) } else { ax = aD.attr("data-fileindex"); aB.uploadCache.content[ax] = aA[0]; aB.uploadCache.config[ax] = au[0] || []; aB.uploadCache.tags[ax] = aC[0] || []; aB.uploadCache.append = at } } else { s.set(aB.id, aA, au, aC, at); aB._initPreview(); aB._initPreviewActions() } } }, _initSuccessThumbs: function () { var ar = this; if (!ar.showPreview) { return } ar._getThumbs(".file-preview-success").each(function () { var au = R(this), at = au.find(".kv-file-remove"); at.removeAttr("disabled"); Q(at, "click", function () { var av = ar._raise("filesuccessremove", [au.attr("id"), au.data("fileindex")]); f(au); if (av === false) { return } au.fadeOut("slow", function () { au.remove(); if (!ar.$preview.find(".file-preview-frame").length) { ar.reset() } }) }) }) }, _checkAsyncComplete: function () { var at = this, ar, au; for (au = 0; au < at.filestack.length; au++) { if (at.filestack[au]) { ar = at.previewInitId + "-" + au; if (R.inArray(ar, at.uploadLog) === -1) { return false } } } return (at.uploadAsyncCount === at.uploadLog.length) }, _uploadExtra: function (ar, au) { var at = this, av = at._getExtraData(ar, au); if (av.length === 0) { return } R.each(av, function (aw, ax) { at.formdata.append(aw, ax) }) }, _uploadSingle: function (aF, aw, av) { var aD = this, aK = aD.getFileStack().length, aC = new FormData(), aJ, ar = aD.previewInitId + "-" + aF, az, aE, aB, aI, au = aD.filestack.length > 0 || !R.isEmptyObject(aD.uploadExtraData), ax, aA, at, aH, ay, aG = { id: ar, index: aF }; aD.formdata = aC; if (aD.showPreview) { az = R("#" + ar + ":not(.file-preview-initial)"); aB = az.find(".kv-file-upload"); aI = az.find(".kv-file-remove"); R("#" + ar).find(".file-thumb-progress").removeClass("hide") } if (aK === 0 || !au || (aB && aB.hasClass("disabled")) || aD._abort(aG)) { return } ay = function (aM, aL) { aD.updateStack(aM, undefined); aD.uploadLog.push(aL); if (aD._checkAsyncComplete()) { aD.fileBatchCompleted = true } }; aE = function () { var aL = aD.uploadCache; if (!aD.fileBatchCompleted) { return } setTimeout(function () { if (aD.showPreview) { s.set(aD.id, aL.content, aL.config, aL.tags, aL.append); if (aD.hasInitData) { aD._initPreview(); aD._initPreviewActions() } } aD.unlock(); aD._clearFileInput(); aD._raise("filebatchuploadcomplete", [aD.filestack, aD._getExtraData()]); aD.uploadCount = 0; aD.uploadStatus = {}; aD.uploadLog = []; aD._setProgress(101) }, 100) }; ax = function (aL) { aJ = aD._getOutData(aL); aD.fileBatchCompleted = false; if (aD.showPreview) { if (!az.hasClass("file-preview-success")) { aD._setThumbStatus(az, "Loading"); r(az, "file-uploading") } aB.attr("disabled", true); aI.attr("disabled", true) } if (!av) { aD.lock() } aD._raise("filepreupload", [aJ, ar, aF]); R.extend(true, aG, aJ); if (aD._abort(aG)) { aL.abort(); aD._setProgressCancelled() } }; aA = function (aM, aN, aL) { aJ = aD._getOutData(aL, aM); R.extend(true, aG, aJ); setTimeout(function () { if (z(aM) || z(aM.error)) { if (aD.showPreview) { aD._setThumbStatus(az, "Success"); aB.hide(); aD._initUploadSuccess(aM, az, av) } aD._raise("fileuploaded", [aJ, az ? az.attr("id") : "", aF]); if (!av) { aD.updateStack(aF, undefined) } else { ay(aF, ar) } } else { aD._showUploadError(aM.error, aG); aD._setPreviewError(az, aF); if (av) { ay(aF, ar) } } }, 100) }; at = function () { setTimeout(function () { if (aD.showPreview) { aB.removeAttr("disabled"); aI.removeAttr("disabled"); az.removeClass("file-uploading"); aD._setProgress(101, R("#" + ar).find(".file-thumb-progress")) } if (!av) { aD.unlock(false); aD._clearFileInput() } else { aE() } aD._initSuccessThumbs() }, 100) }; aH = function (aM, aO, aN) { var aL = aD._parseError(aM, aN, (av ? aw[aF].name : null)); setTimeout(function () { if (av) { ay(aF, ar) } aD.uploadStatus[ar] = 100; aD._setPreviewError(az, aF); R.extend(true, aG, aD._getOutData(aM)); aD._showUploadError(aL, aG) }, 100) }; aC.append(aD.uploadFileAttr, aw[aF], aD.filenames[aF]); aC.append("file_id", aF); aD._ajaxSubmit(ax, aA, at, aH, ar, aF) }, _uploadBatch: function () { var aB = this, ar = aB.filestack, az = ar.length, aw = {}, ax, aA, ay, av, at = aB.filestack.length > 0 || !R.isEmptyObject(aB.uploadExtraData), au; aB.formdata = new FormData(); if (az === 0 || !at || aB._abort(aw)) { return } au = function () { R.each(ar, function (aC) { aB.updateStack(aC, undefined) }); aB._clearFileInput() }; ax = function (aC) { aB.lock(); var aD = aB._getOutData(aC); if (aB.showPreview) { aB._getThumbs().each(function () { var aG = R(this), aE = aG.find(".kv-file-upload"), aF = aG.find(".kv-file-remove"); if (!aG.hasClass("file-preview-success")) { aB._setThumbStatus(aG, "Loading"); r(aG, "file-uploading") } aE.attr("disabled", true); aF.attr("disabled", true) }) } aB._raise("filebatchpreupload", [aD]); if (aB._abort(aD)) { aC.abort(); aB._setProgressCancelled() } }; aA = function (aG, aI, aF) { var aH = aB._getOutData(aF, aG), aD = aB._getThumbs(":not(.file-preview-error)"), aC = 0, aE = z(aG) || z(aG.errorkeys) ? [] : aG.errorkeys; if (z(aG) || z(aG.error)) { aB._raise("filebatchuploadsuccess", [aH]); au(); if (aB.showPreview) { aD.each(function () { var aK = R(this), aJ = aK.find(".kv-file-upload"); aK.find(".kv-file-upload").hide(); aB._setThumbStatus(aK, "Success"); aK.removeClass("file-uploading"); aJ.removeAttr("disabled") }); aB._initUploadSuccess(aG) } else { aB.reset() } } else { if (aB.showPreview) { aD.each(function () { var aL = R(this), aK = aL.find(".kv-file-remove"), aJ = aL.find(".kv-file-upload"); aL.removeClass("file-uploading"); aJ.removeAttr("disabled"); aK.removeAttr("disabled"); if (aE.length === 0) { aB._setPreviewError(aL); return } if (R.inArray(aC, aE) !== -1) { aB._setPreviewError(aL) } else { aL.find(".kv-file-upload").hide(); aB._setThumbStatus(aL, "Success"); aB.updateStack(aC, undefined) } aC++ }); aB._initUploadSuccess(aG) } aB._showUploadError(aG.error, aH, "filebatchuploaderror") } }; av = function () { aB._setProgress(101); aB.unlock(); aB._initSuccessThumbs(); aB._clearFileInput(); aB._raise("filebatchuploadcomplete", [aB.filestack, aB._getExtraData()]) }; ay = function (aD, aG, aF) { var aE = aB._getOutData(aD), aC = aB._parseError(aD, aF); aB._showUploadError(aC, aE, "filebatchuploaderror"); aB.uploadFileCount = az - 1; if (!aB.showPreview) { return } aB._getThumbs().each(function () { var aI = R(this), aH = aI.attr("data-fileindex"); aI.removeClass("file-uploading"); if (aB.filestack[aH] !== undefined) { aB._setPreviewError(aI) } }); aB._getThumbs().removeClass("file-uploading"); aB._getThumbs(" .kv-file-upload").removeAttr("disabled"); aB._getThumbs(" .kv-file-delete").removeAttr("disabled") }; R.each(ar, function (aC, aD) { if (!z(ar[aC])) { aB.formdata.append(aB.uploadFileAttr, aD, aB.filenames[aC]) } }); aB._ajaxSubmit(ax, aA, av, ay) }, _uploadExtraOnly: function () { var at = this, aw = {}, au, av, ax, ar; at.formdata = new FormData(); if (at._abort(aw)) { return } au = function (ay) { at.lock(); var az = at._getOutData(ay); at._raise("filebatchpreupload", [az]); at._setProgress(50); aw.data = az; aw.xhr = ay; if (at._abort(aw)) { ay.abort(); at._setProgressCancelled() } }; av = function (az, aB, ay) { var aA = at._getOutData(ay, az); if (z(az) || z(az.error)) { at._raise("filebatchuploadsuccess", [aA]); at._clearFileInput(); at._initUploadSuccess(az) } else { at._showUploadError(az.error, aA, "filebatchuploaderror") } }; ax = function () { at._setProgress(101); at.unlock(); at._clearFileInput(); at._raise("filebatchuploadcomplete", [at.filestack, at._getExtraData()]) }; ar = function (az, aC, aB) { var aA = at._getOutData(az), ay = at._parseError(az, aB); aw.data = aA; at._showUploadError(ay, aA, "filebatchuploaderror") }; at._ajaxSubmit(au, av, ax, ar) }, _initFileActions: function () { var ar = this; if (!ar.showPreview) { return } ar._initZoomButton(); ar.$preview.find(".kv-file-remove").each(function () { var aw = R(this), ax = aw.closest(".file-preview-frame"), at, aA = ax.attr("id"), ay = ax.attr("data-fileindex"), az, av, au; Q(aw, "click", function () { au = ar._raise("filepreremove", [aA, ay]); if (au === false || !ar._validateMinCount()) { return false } at = ax.hasClass("file-preview-error"); f(ax); ax.fadeOut("slow", function () { ar.updateStack(ay, undefined); ar._clearObjects(ax); ax.remove(); if (aA && at) { ar.$errorContainer.find('li[data-file-id="' + aA + '"]').fadeOut("fast", function () { R(this).remove(); if (!ar._errorsExist()) { ar._resetErrors() } }) } ar._clearFileInput(); var aD = ar.getFileStack(true), aC = s.count(ar.id), aB = aD.length, aE = ar.showPreview && ar.$preview.find(".file-preview-frame").length; if (aB === 0 && aC === 0 && !aE) { ar.reset() } else { az = aC + aB; av = az > 1 ? ar._getMsgSelected(az) : (aD[0] ? ar._getFileNames()[0] : ""); ar._setCaption(av) } ar._raise("fileremoved", [aA, ay]) }) }) }); ar.$preview.find(".kv-file-upload").each(function () { var at = R(this); Q(at, "click", function () { var au = at.closest(".file-preview-frame"), av = au.attr("data-fileindex"); if (!au.hasClass("file-preview-error")) { ar._uploadSingle(av, ar.filestack, false) } }) }) }, _hideFileIcon: function () { if (this.overwriteInitial) { this.$captionContainer.find(".kv-caption-icon").hide() } }, _showFileIcon: function () { this.$captionContainer.find(".kv-caption-icon").show() }, _getSize: function (ar) { var aw = parseFloat(ar); if (ar === null || isNaN(aw)) { return "" } var at = this, av, ay = at.fileSizeGetter, ax, au; if (typeof ay === "function") { au = ay(ar) } else { av = Math.floor(Math.log(aw) / Math.log(1024)); ax = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"]; au = (aw / Math.pow(1024, av)).toFixed(2) * 1 + " " + ax[av] } return at._getLayoutTemplate("size").replace("{sizeText}", au) }, _generatePreviewTemplate: function (av, aJ, aH, at, au, aF, ay, aB, aG, aw) { var az = this, ar = az._getPreviewTemplate(av), aC, aD, ax = aB || "", aI = x(av, az.previewSettings, ao[av]), aE = az.slug(aH), aA = aG || az._renderFileFooter(aE, ay, aI.width, aF); aw = aw || au.slice(au.lastIndexOf("-") + 1); ar = az._parseFilePreviewIcon(ar, aH); if (av === "text" || av === "html") { aD = av === "text" ? A(aJ) : aJ; aC = ar.replace(/\{previewId}/g, au).replace(/\{caption}/g, aE).replace(/\{width}/g, aI.width).replace(/\{height}/g, aI.height).replace(/\{frameClass}/g, ax).replace(/\{cat}/g, at).replace(/\{footer}/g, aA).replace(/\{fileindex}/g, aw).replace(/\{data}/g, aD).replace(/\{template}/g, av) } else { aC = ar.replace(/\{previewId}/g, au).replace(/\{caption}/g, aE).replace(/\{frameClass}/g, ax).replace(/\{type}/g, at).replace(/\{fileindex}/g, aw).replace(/\{width}/g, aI.width).replace(/\{height}/g, aI.height).replace(/\{footer}/g, aA).replace(/\{data}/g, aJ).replace(/\{template}/g, av) } return aC }, _previewDefault: function (au, az, aB) { var aC = this, av = aC.$preview, ar = av.find(".file-live-thumbs"); if (!aC.showPreview) { return } var at = au ? au.name : "", aA = au ? au.type : "", ay, ax = aB === true && !aC.isUploadable, aw = ak.createObjectURL(au); aC._clearDefaultPreview(); ay = aC._generatePreviewTemplate("other", aw, at, aA, az, ax, au.size); if (!ar.length) { ar = R(document.createElement("div")).addClass("file-live-thumbs").appendTo(av) } ar.append("\n" + ay); if (aB === true && aC.isUploadable) { aC._setThumbStatus(R("#" + az), "Error") } }, _previewFile: function (ax, au, aD, aA, aw) { if (!this.showPreview) { return } var aI = this, aF = aI._parseFileType(au), at = au ? au.name : "", aH = aI.slug(at), ay = aI.allowedPreviewTypes, aC = aI.allowedPreviewMimeTypes, av = aI.$preview, aE = ay && ay.indexOf(aF) >= 0, ar = av.find(".file-live-thumbs"), aB = (aF === "text" || aF === "html" || aF === "image") ? aD.target.result : aw, az, aG = aC && aC.indexOf(au.type) !== -1; if (!ar.length) { ar = R(document.createElement("div")).addClass("file-live-thumbs").appendTo(av) } if (aF === "html" && aI.purifyHtml && window.DOMPurify) { aB = window.DOMPurify.sanitize(aB) } if (aE || aG) { az = aI._generatePreviewTemplate(aF, aB, at, au.type, aA, false, au.size); aI._clearDefaultPreview(); ar.append("\n" + az); aI._validateImage(ax, aA, aH, au.type) } else { aI._previewDefault(au, aA) } aI._initSortable() }, _slugDefault: function (ar) { return z(ar) ? "" : String(ar).replace(/[\-\[\]\/\{}:;#%=\(\)\*\+\?\\\^\$\|<>&"']/g, "_") }, _readFiles: function (ar) { this.reader = new FileReader(); var aH = this, aI = aH.$element, aA = aH.$preview, aC = aH.reader, aF = aH.$previewContainer, aG = aH.$previewStatus, aD = aH.msgLoading, av = aH.msgProgress, aB = aH.previewInitId, au = ar.length, az = aH.fileTypeSettings, aw = aH.filestack.length, aE, at = aH.maxFilePreviewSize && parseFloat(aH.maxFilePreviewSize), ay = aA.length && (!at || isNaN(at)), ax = function (aO, aL, aJ, aK) { var aN = R.extend(true, {}, aH._getOutData({}, {}, ar), { id: aJ, index: aK }), aM = { id: aJ, index: aK, file: aL, files: ar }; aH._previewDefault(aL, aJ, true); if (aH.isUploadable) { aH.addToStack(undefined) } setTimeout(function () { aE(aK + 1) }, 100); aH._initFileActions(); if (aH.removeFromPreviewOnError) { R("#" + aJ).remove() } return aH.isUploadable ? aH._showUploadError(aO, aN) : aH._showError(aO, aM) }; aH.loadedImages = []; aH.totalImagesCount = 0; R.each(ar, function (aK, aJ) { var aL = aH.fileTypeSettings.image || aj.image; if (aL && aL(aJ.type)) { aH.totalImagesCount++ } }); aE = function (aX) { if (z(aI.attr("multiple"))) { au = 1 } if (aX >= au) { if (aH.isUploadable && aH.filestack.length > 0) { aH._raise("filebatchselected", [aH.getFileStack()]) } else { aH._raise("filebatchselected", [ar]) } aF.removeClass("file-thumb-loading"); aG.html(""); return } var aT = aw + aX, aK = aB + "-" + aT, aS, aV, a0 = ar[aX], aY = aH.slug(a0.name), aR = (a0.size || 0) / 1000, aN, aL = "", aP = ak.createObjectURL(a0), a1 = 0, aW, aO, a2, aZ, aJ = aH.allowedFileTypes, aU = z(aJ) ? "" : aJ.join(", "), aQ = aH.allowedFileExtensions, aM = z(aQ) ? "" : aQ.join(", "); if (!z(aQ)) { aL = new RegExp("\\.(" + aQ.join("|") + ")$", "i") } aR = aR.toFixed(2); if (aH.maxFileSize > 0 && aR > aH.maxFileSize) { aO = aH.msgSizeTooLarge.replace("{name}", aY).replace("{size}", aR).replace("{maxSize}", aH.maxFileSize); aH.isError = ax(aO, a0, aK, aX); return } if (!z(aJ) && H(aJ)) { for (aW = 0; aW < aJ.length; aW += 1) { a2 = aJ[aW]; aN = az[a2]; aZ = (aN !== undefined && aN(a0.type, aY)); a1 += z(aZ) ? 0 : aZ.length } if (a1 === 0) { aO = aH.msgInvalidFileType.replace("{name}", aY).replace("{types}", aU); aH.isError = ax(aO, a0, aK, aX); return } } if (a1 === 0 && !z(aQ) && H(aQ) && !z(aL)) { aZ = k(aY, aL); a1 += z(aZ) ? 0 : aZ.length; if (a1 === 0) { aO = aH.msgInvalidFileExtension.replace("{name}", aY).replace("{extensions}", aM); aH.isError = ax(aO, a0, aK, aX); return } } if (!aH.showPreview) { aH.addToStack(a0); setTimeout(function () { aE(aX + 1) }, 100); aH._raise("fileloaded", [a0, aK, aX, aC]); return } if (!ay && aR > at) { aH.addToStack(a0); aF.addClass("file-thumb-loading"); aH._previewDefault(a0, aK); aH._initFileActions(); aH._updateFileDetails(au); aE(aX + 1); return } if (aA.length && FileReader !== undefined) { aG.html(aD.replace("{index}", aX + 1).replace("{files}", au)); aF.addClass("file-thumb-loading"); aC.onerror = function (a3) { aH._errorHandler(a3, aY) }; aC.onload = function (a3) { aH._previewFile(aX, a0, a3, aK, aP); aH._initFileActions() }; aC.onloadend = function () { aO = av.replace("{index}", aX + 1).replace("{files}", au).replace("{percent}", 50).replace("{name}", aY); setTimeout(function () { aG.html(aO); aH._updateFileDetails(au); aE(aX + 1) }, 100); aH._raise("fileloaded", [a0, aK, aX, aC]) }; aC.onprogress = function (a5) { if (a5.lengthComputable) { var a4 = (a5.loaded / a5.total) * 100, a3 = Math.ceil(a4); aO = av.replace("{index}", aX + 1).replace("{files}", au).replace("{percent}", a3).replace("{name}", aY); setTimeout(function () { aG.html(aO) }, 100) } }; aS = x("text", az, aj.text); aV = x("image", az, aj.image); if (aS(a0.type, aY)) { aC.readAsText(a0, aH.textEncoding) } else { if (aV(a0.type, aY)) { aC.readAsDataURL(a0) } else { aC.readAsArrayBuffer(a0) } } } else { aH._previewDefault(a0, aK); setTimeout(function () { aE(aX + 1); aH._updateFileDetails(au) }, 100); aH._raise("fileloaded", [a0, aK, aX, aC]) } aH.addToStack(a0) }; aE(0); aH._updateFileDetails(au, false) }, _updateFileDetails: function (at) { var az = this, aA = az.$element, aw = az.getFileStack(), ar = (p(9) && o(aA.val())) || (aA[0].files[0] && aA[0].files[0].name) || (aw.length && aw[0].name) || "", ay = az.slug(ar), au = az.isUploadable ? aw.length : at, ax = s.count(az.id) + au, av = au > 1 ? az._getMsgSelected(ax) : ay; if (az.isError) { az.$previewContainer.removeClass("file-thumb-loading"); az.$previewStatus.html(""); az.$captionContainer.find(".kv-caption-icon").hide() } else { az._showFileIcon() } az._setCaption(av, az.isError); az.$container.removeClass("file-input-new file-input-ajax-new"); if (arguments.length === 1) { az._raise("fileselect", [at, ay]) } if (s.count(az.id)) { az._initPreviewActions() } }, _setThumbStatus: function (az, ar) { var at = this; if (!at.showPreview) { return } var aw = "indicator" + ar, ay = aw + "Title", av = "file-preview-" + ar.toLowerCase(), ax = az.find(".file-upload-indicator"), au = at.fileActionSettings; az.removeClass("file-preview-success file-preview-error file-preview-loading"); if (ar === "Error") { az.find(".kv-file-upload").attr("disabled", true) } if (ar === "Success") { az.find(".file-drag-handle").remove(); ax.css("margin-left", 0) } ax.html(au[aw]); ax.attr("title", au[ay]); az.addClass(av) }, _setProgressCancelled: function () { var ar = this; ar._setProgress(101, ar.$progress, ar.msgCancelled) }, _setProgress: function (ay, av, au) { var ar = this, ax = Math.min(ay, 100), aw = ax < 100 ? ar.progressTemplate : (au ? ar.progressErrorTemplate : (ay <= 100 ? ar.progressTemplate : ar.progressCompleteTemplate)), az = ar.progressUploadThreshold; av = av || ar.$progress; if (!z(aw)) { if (az && ax > az && ay <= 100) { var at = aw.replace("{percent}", az).replace("{percent}", az).replace("{percent}%", ar.msgUploadThreshold); av.html(at) } else { av.html(aw.replace(/\{percent}/g, ax)) } if (au) { av.find('[role="progressbar"]').html(au) } } }, _setFileDropZoneTitle: function () { var ar = this, au = ar.$container.find(".file-drop-zone"), av = ar.dropZoneTitle, at; if (ar.isClickable) { at = z(ar.$element.attr("multiple")) ? ar.fileSingle : ar.filePlural; av += ar.dropZoneClickTitle.replace("{files}", at) } au.find("." + ar.dropZoneTitleClass).remove(); if (!ar.isUploadable || !ar.showPreview || au.length === 0 || ar.getFileStack().length > 0 || !ar.dropZoneEnabled) { return } if (au.find(".file-preview-frame").length === 0 && z(ar.defaultPreviewContent)) { au.prepend('<div class="' + ar.dropZoneTitleClass + '">' + av + "</div>") } ar.$container.removeClass("file-input-new"); r(ar.$container, "file-input-ajax-new") }, _setAsyncUploadStatus: function (ar, aw, av) { var at = this, au = 0; at._setProgress(aw, R("#" + ar).find(".file-thumb-progress")); at.uploadStatus[ar] = aw; R.each(at.uploadStatus, function (ax, ay) { au += ay }); at._setProgress(Math.floor(au / av)) }, _validateMinCount: function () { var at = this, ar = at.isUploadable ? at.getFileStack().length : at.$element.get(0).files.length; if (at.validateInitialCount && at.minFileCount > 0 && at._getFileCount(ar - 1) < at.minFileCount) { at._noFilesError({}); return false } return true }, _getFileCount: function (au) { var ar = this, at = 0; if (ar.validateInitialCount && !ar.overwriteInitial) { at = s.count(ar.id); au += at } return au }, _getFileName: function (ar) { return ar && ar.name ? this.slug(ar.name) : undefined }, _getFileNames: function (ar) { var at = this; return at.filenames.filter(function (au) { return (ar ? au !== undefined : au !== undefined && au !== null) }) }, _setPreviewError: function (av, at, au) { var ar = this; if (at !== undefined) { ar.updateStack(at, au) } if (ar.removeFromPreviewOnError) { av.remove() } else { ar._setThumbStatus(av, "Error") } }, _checkDimensions: function (ay, aB, ar, aF, av, aA, ax) { var aD = this, au, az, aE = aB === "Small" ? "min" : "max", aw = aD[aE + "Image" + aA], at, aC; if (z(aw) || !ar.length) { return } at = ar[0]; az = (aA === "Width") ? at.naturalWidth || at.width : at.naturalHeight || at.height; aC = aB === "Small" ? az >= aw : az <= aw; if (aC) { return } au = aD["msgImage" + aA + aB].replace("{name}", av).replace("{size}", aw); aD._showUploadError(au, ax); aD._setPreviewError(aF, ay, null) }, _validateImage: function (ax, az, at, aA) { var aB = this, av = aB.$preview, au, ay, aw, aC = av.find("#" + az), ar = aC.find("img"); at = at || "Untitled"; if (!ar.length) { return } Q(ar, "load", function () { ay = aC.width(); aw = av.width(); if (ay > aw) { ar.css("width", "100%"); aC.css("width", "97%") } au = { ind: ax, id: az }; aB._checkDimensions(ax, "Small", ar, aC, at, "Width", au); aB._checkDimensions(ax, "Small", ar, aC, at, "Height", au); if (!aB.resizeImage) { aB._checkDimensions(ax, "Large", ar, aC, at, "Width", au); aB._checkDimensions(ax, "Large", ar, aC, at, "Height", au) } aB._raise("fileimageloaded", [az]); aB.loadedImages.push({ ind: ax, img: ar, thumb: aC, pid: az, typ: aA }); aB._validateAllImages(); ak.revokeObjectURL(ar.attr("src")) }) }, _validateAllImages: function () { var az = this, aw, au, ar, aA, ax, at, av = {}, ay; if (az.loadedImages.length !== az.totalImagesCount) { return } az._raise("fileimagesloaded"); if (!az.resizeImage) { return } ay = az.isUploadable ? az._showUploadError : az._showError; for (aw = 0; aw < az.loadedImages.length; aw++) { au = az.loadedImages[aw]; ar = au.img; aA = au.thumb; ax = au.pid; at = au.ind; av = { id: ax, "index": at }; if (!az._getResizedImage(ar[0], au.typ, ax, at)) { ay(az.msgImageResizeError, av, "fileimageresizeerror"); az._setPreviewError(aA, at) } } az._raise("fileimagesresized") }, _getResizedImage: function (ay, aD, aB, av) { var aH = this, at = ay.naturalWidth, aG = ay.naturalHeight, aC = 1, aF = aH.maxImageWidth || at, aE = aH.maxImageHeight || aG, aA = (at && aG), ax, aw, au = aH.imageCanvas, ar = aH.imageCanvasContext; if (!aA) { return false } if (at === aF && aG === aE) { return true } aD = aD || aH.resizeDefaultImageType; ax = at > aF; aw = aG > aE; if (aH.resizePreference === "width") { aC = ax ? aF / at : (aw ? aE / aG : 1) } else { aC = aw ? aE / aG : (ax ? aF / at : 1) } aH._resetCanvas(); at *= aC; aG *= aC; au.width = at; au.height = aG; try { ar.drawImage(ay, 0, 0, at, aG); au.toBlob(function (aI) { aH._raise("fileimageresized", [aB, av]); aH.filestack[av] = aI }, aD, aH.resizeQuality); return true } catch (az) { return false } }, _initBrowse: function (at) { var ar = this; if (ar.showBrowse) { ar.$btnFile = at.find(".btn-file"); ar.$btnFile.append(ar.$element) } else { ar.$element.hide() } }, _initCaption: function () { var ar = this, at = ar.initialCaption || ""; if (ar.overwriteInitial || z(at)) { ar.$caption.html(""); return false } ar._setCaption(at); return true }, _setCaption: function (ax, aw) { var at = this, ay, au, az, av, ar = at.getFileStack(); if (!at.$caption.length) { return } if (aw) { ay = R("<div>" + at.msgValidationError + "</div>").text(); az = ar.length; if (az) { av = az === 1 && ar[0] ? at._getFileNames()[0] : at._getMsgSelected(az) } else { av = at._getMsgSelected(at.msgNo) } au = '<span class="' + at.msgValidationErrorClass + '">' + at.msgValidationErrorIcon + (z(ax) ? av : ax) + "</span>" } else { if (z(ax)) { return } ay = R("<div>" + ax + "</div>").text(); au = at._getLayoutTemplate("fileIcon") + ay } at.$caption.html(au); at.$caption.attr("title", ay); at.$captionContainer.find(".file-caption-ellipsis").attr("title", ay) }, _createContainer: function () { var ar = this, at = R(document.createElement("div")).attr({ "class": "file-input file-input-new" }).html(ar._renderMain()); ar.$element.before(at); ar._initBrowse(at); if (ar.theme) { at.addClass("theme-" + ar.theme) } return at }, _refreshContainer: function () { var ar = this, at = ar.$container; at.before(ar.$element); at.html(ar._renderMain()); ar._initBrowse(at) }, _renderMain: function () { var at = this, av = (at.isUploadable && at.dropZoneEnabled) ? " file-drop-zone" : "file-drop-disabled", ax = !at.showClose ? "" : at._getLayoutTemplate("close"), aw = !at.showPreview ? "" : at._getLayoutTemplate("preview").replace(/\{class}/g, at.previewClass).replace(/\{dropClass}/g, av), au = at.isDisabled ? at.captionClass + " file-caption-disabled" : at.captionClass, ar = at.captionTemplate.replace(/\{class}/g, au + " kv-fileinput-caption"); return at.mainTemplate.replace(/\{class}/g, at.mainClass + (!at.showBrowse && at.showCaption ? " no-browse" : "")).replace(/\{preview}/g, aw).replace(/\{close}/g, ax).replace(/\{caption}/g, ar).replace(/\{upload}/g, at._renderButton("upload")).replace(/\{remove}/g, at._renderButton("remove")).replace(/\{cancel}/g, at._renderButton("cancel")).replace(/\{browse}/g, at._renderButton("browse")) }, _renderButton: function (aw) { var aA = this, ar = aA._getLayoutTemplate("btnDefault"), av = aA[aw + "Class"], ay = aA[aw + "Title"], ax = aA[aw + "Icon"], az = aA[aw + "Label"], au = aA.isDisabled ? " disabled" : "", at = "button"; switch (aw) { case "remove": if (!aA.showRemove) { return "" } break; case "cancel": if (!aA.showCancel) { return "" } av += " hide"; break; case "upload": if (!aA.showUpload) { return "" } if (aA.isUploadable && !aA.isDisabled) { ar = aA._getLayoutTemplate("btnLink").replace("{href}", aA.uploadUrl) } else { at = "submit" } break; case "browse": if (!aA.showBrowse) { return "" } ar = aA._getLayoutTemplate("btnBrowse"); break; default: return "" } av += aw === "browse" ? " btn-file" : " fileinput-" + aw + " fileinput-" + aw + "-button"; if (!z(az)) { az = ' <span class="' + aA.buttonLabelClass + '">' + az + "</span>" } return ar.replace("{type}", at).replace("{css}", av).replace("{title}", ay).replace("{status}", au).replace("{icon}", ax).replace("{label}", az) }, _renderThumbProgress: function () { return '<div class="file-thumb-progress hide">' + this.progressTemplate.replace(/\{percent}/g, "0") + "</div>" }, _renderFileFooter: function (aD, aF, ar, aw) { var aE = this, at = aE.fileActionSettings, aB = at.showRemove, av = at.showDrag, ay = at.showUpload, aC = at.showZoom, au, aA = aE._getLayoutTemplate("footer"), az = aw ? at.indicatorError : at.indicatorNew, ax = aw ? at.indicatorErrorTitle : at.indicatorNewTitle; aF = aE._getSize(aF); if (aE.isUploadable) { au = aA.replace(/\{actions}/g, aE._renderFileActions(ay, aB, aC, av, false, false, false)).replace(/\{caption}/g, aD).replace(/\{size}/g, aF).replace(/\{width}/g, ar).replace(/\{progress}/g, aE._renderThumbProgress()).replace(/\{indicator}/g, az).replace(/\{indicatorTitle}/g, ax) } else { au = aA.replace(/\{actions}/g, aE._renderFileActions(false, false, aC, av, false, false, false)).replace(/\{caption}/g, aD).replace(/\{size}/g, aF).replace(/\{width}/g, ar).replace(/\{progress}/g, "").replace(/\{indicator}/g, az).replace(/\{indicatorTitle}/g, ax) } au = e(au, aE.previewThumbTags); return au }, _renderFileActions: function (aG, aE, aC, ay, av, aw, aL, aH) { if (!aG && !aE && !aC && !ay) { return "" } var aF = this, ar = aw === false ? "" : ' data-url="' + aw + '"', aI = aL === false ? "" : ' data-key="' + aL + '"', au = "", ax = "", aD = "", az = "", aA, aK = aF._getLayoutTemplate("actions"), aJ = aF.fileActionSettings, at = aF.otherActionButtons.replace(/\{dataKey}/g, aI), aB = av ? aJ.removeClass + " disabled" : aJ.removeClass; if (aE) { au = aF._getLayoutTemplate("actionDelete").replace(/\{removeClass}/g, aB).replace(/\{removeIcon}/g, aJ.removeIcon).replace(/\{removeTitle}/g, aJ.removeTitle).replace(/\{dataUrl}/g, ar).replace(/\{dataKey}/g, aI) } if (aG) { ax = aF._getLayoutTemplate("actionUpload").replace(/\{uploadClass}/g, aJ.uploadClass).replace(/\{uploadIcon}/g, aJ.uploadIcon).replace(/\{uploadTitle}/g, aJ.uploadTitle) } if (aC) { aD = aF._getLayoutTemplate("actionZoom").replace(/\{zoomClass}/g, aJ.zoomClass).replace(/\{zoomIcon}/g, aJ.zoomIcon).replace(/\{zoomTitle}/g, aJ.zoomTitle) } if (ay && aH) { aA = "drag-handle-init " + aJ.dragClass; az = aF._getLayoutTemplate("actionDrag").replace(/\{dragClass}/g, aA).replace(/\{dragTitle}/g, aJ.dragTitle).replace(/\{dragIcon}/g, aJ.dragIcon) } return aK.replace(/\{delete}/g, au).replace(/\{upload}/g, ax).replace(/\{zoom}/g, aD).replace(/\{drag}/g, az).replace(/\{other}/g, at) }, _browse: function (at) { var ar = this; ar._raise("filebrowse"); if (at && at.isDefaultPrevented()) { return } if (ar.isError && !ar.isUploadable) { ar.clear() } ar.$captionContainer.focus() }, _change: function (aG) { var az = this, aI = az.$element; if (!az.isUploadable && z(aI.val()) && az.fileInputCleared) { az.fileInputCleared = false; return } az.fileInputCleared = false; var ay, at, aJ, aw = arguments.length > 1, ar = az.isUploadable, aB = 0, aE, aA, aC, au = aw ? aG.originalEvent.dataTransfer.files : aI.get(0).files, aF = az.filestack.length, ax = z(aI.attr("multiple")), av = (ax && aF > 0), aD = 0, aH = function (aK, aN, aL, aM) { var aP = R.extend(true, {}, az._getOutData({}, {}, au), { id: aL, index: aM }), aO = { id: aL, index: aM, file: aN, files: au }; return az.isUploadable ? az._showUploadError(aK, aP) : az._showError(aK, aO) }; az.reader = null; az._resetUpload(); az._hideFileIcon(); if (az.isUploadable) { az.$container.find(".file-drop-zone ." + az.dropZoneTitleClass).remove() } if (aw) { ay = []; while (au[aB]) { aE = au[aB]; if (!aE.type && aE.size % 4096 === 0) { aD++ } else { ay.push(aE) } aB++ } } else { if (aG.target.files === undefined) { ay = aG.target && aG.target.value ? [{ name: aG.target.value.replace(/^.+\\/, "") }] : [] } else { ay = aG.target.files } } if (z(ay) || ay.length === 0) { if (!ar) { az.clear() } az._showFolderError(aD); az._raise("fileselectnone"); return } az._resetErrors(); aC = ay.length; aJ = az._getFileCount(az.isUploadable ? (az.getFileStack().length + aC) : aC); if (az.maxFileCount > 0 && aJ > az.maxFileCount) { if (!az.autoReplace || aC > az.maxFileCount) { aA = (az.autoReplace && aC > az.maxFileCount) ? aC : aJ; at = az.msgFilesTooMany.replace("{m}", az.maxFileCount).replace("{n}", aA); az.isError = aH(at, null, null, null); az.$captionContainer.find(".kv-caption-icon").hide(); az._setCaption("", true); az.$container.removeClass("file-input-new file-input-ajax-new"); return } if (aJ > az.maxFileCount) { az._resetPreviewThumbs(ar) } } else { if (!ar || av) { az._resetPreviewThumbs(false); if (av) { az.clearStack() } } else { if (ar && aF === 0 && (!s.count(az.id) || az.overwriteInitial)) { az._resetPreviewThumbs(true) } } } if (az.isPreviewable) { az._readFiles(ay) } else { az._updateFileDetails(1) } az._showFolderError(aD) }, _abort: function (au) { var ar = this, at; if (ar.ajaxAborted && typeof ar.ajaxAborted === "object" && ar.ajaxAborted.message !== undefined) { at = R.extend(true, {}, ar._getOutData(), au); at.abortData = ar.ajaxAborted.data || {}; at.abortMessage = ar.ajaxAborted.message; ar.cancel(); ar._setProgress(101, ar.$progress, ar.msgCancelled); ar._showUploadError(ar.ajaxAborted.message, at, "filecustomerror"); return true } return false }, _resetFileStack: function () { var ar = this, au = 0, av = [], at = []; ar._getThumbs().each(function () { var ay = R(this), ax = ay.attr("data-fileindex"), aw = ar.filestack[ax]; if (ax === -1) { return } if (aw !== undefined) { av[au] = aw; at[au] = ar._getFileName(aw); ay.attr({ "id": ar.previewInitId + "-" + au, "data-fileindex": au }); au++ } else { ay.attr({ "id": "uploaded-" + C(), "data-fileindex": "-1" }) } }); ar.filestack = av; ar.filenames = at }, clearStack: function () { var ar = this; ar.filestack = []; ar.filenames = []; return ar.$element }, updateStack: function (au, at) { var ar = this; ar.filestack[au] = at; ar.filenames[au] = ar._getFileName(at); return ar.$element }, addToStack: function (at) { var ar = this; ar.filestack.push(at); ar.filenames.push(ar._getFileName(at)); return ar.$element }, getFileStack: function (ar) { var at = this; return at.filestack.filter(function (au) { return (ar ? au !== undefined : au !== undefined && au !== null) }) }, getFilesCount: function () { var at = this, ar = at.isUploadable ? at.getFileStack().length : at.$element.get(0).files.length; return at._getFileCount(ar) }, lock: function () { var ar = this; ar._resetErrors(); ar.disable(); if (ar.showRemove) { r(ar.$container.find(".fileinput-remove"), "hide") } if (ar.showCancel) { ar.$container.find(".fileinput-cancel").removeClass("hide") } ar._raise("filelock", [ar.filestack, ar._getExtraData()]); return ar.$element }, unlock: function (at) { var ar = this; if (at === undefined) { at = true } ar.enable(); if (ar.showCancel) { r(ar.$container.find(".fileinput-cancel"), "hide") } if (ar.showRemove) { ar.$container.find(".fileinput-remove").removeClass("hide") } if (at) { ar._resetFileStack() } ar._raise("fileunlock", [ar.filestack, ar._getExtraData()]); return ar.$element }, cancel: function () { var at = this, av = at.ajaxRequests, ar = av.length, au; if (ar > 0) { for (au = 0; au < ar; au += 1) { at.cancelling = true; av[au].abort() } } at._setProgressCancelled(); at._getThumbs().each(function () { var ax = R(this), aw = ax.attr("data-fileindex"); ax.removeClass("file-uploading"); if (at.filestack[aw] !== undefined) { ax.find(".kv-file-upload").removeClass("disabled").removeAttr("disabled"); ax.find(".kv-file-remove").removeClass("disabled").removeAttr("disabled") } at.unlock() }); return at.$element }, clear: function () { var ar = this, at; ar.$btnUpload.removeAttr("disabled"); ar._getThumbs().find("video,audio,img").each(function () { f(R(this)) }); ar._resetUpload(); ar.clearStack(); ar._clearFileInput(); ar._resetErrors(true); ar._raise("fileclear"); if (ar._hasInitialPreview()) { ar._showFileIcon(); ar._resetPreview(); ar._initPreviewActions(); ar.$container.removeClass("file-input-new") } else { ar._getThumbs().each(function () { ar._clearObjects(R(this)) }); if (ar.isUploadable) { s.data[ar.id] = {} } ar.$preview.html(""); at = (!ar.overwriteInitial && ar.initialCaption.length > 0) ? ar.initialCaption : ""; ar.$caption.html(at); ar.$caption.attr("title", ""); r(ar.$container, "file-input-new"); ar._validateDefaultPreview() } if (ar.$container.find(".file-preview-frame").length === 0) { if (!ar._initCaption()) { ar.$captionContainer.find(".kv-caption-icon").hide() } } ar._hideFileIcon(); ar._raise("filecleared"); ar.$captionContainer.focus(); ar._setFileDropZoneTitle(); return ar.$element }, reset: function () { var ar = this; ar._resetPreview(); ar.$container.find(".fileinput-filename").text(""); ar._raise("filereset"); r(ar.$container, "file-input-new"); if (ar.$preview.find(".file-preview-frame").length || ar.isUploadable && ar.dropZoneEnabled) { ar.$container.removeClass("file-input-new") } ar._setFileDropZoneTitle(); ar.clearStack(); ar.formdata = {}; return ar.$element }, disable: function () { var ar = this; ar.isDisabled = true; ar._raise("filedisabled"); ar.$element.attr("disabled", "disabled"); ar.$container.find(".kv-fileinput-caption").addClass("file-caption-disabled"); ar.$container.find(".btn-file, .fileinput-remove, .fileinput-upload, .file-preview-frame button").attr("disabled", true); ar._initDragDrop(); return ar.$element }, enable: function () { var ar = this; ar.isDisabled = false; ar._raise("fileenabled"); ar.$element.removeAttr("disabled"); ar.$container.find(".kv-fileinput-caption").removeClass("file-caption-disabled"); ar.$container.find(".btn-file, .fileinput-remove, .fileinput-upload, .file-preview-frame button").removeAttr("disabled"); ar._initDragDrop(); return ar.$element }, upload: function () { var au = this, at = au.getFileStack().length, ay = {}, aw, ax, ar, av = !R.isEmptyObject(au._getExtraData()); if (au.minFileCount > 0 && au._getFileCount(at) < au.minFileCount) { au._noFilesError(ay); return } if (!au.isUploadable || au.isDisabled || (at === 0 && !av)) { return } au._resetUpload(); au.$progress.removeClass("hide"); au.uploadCount = 0; au.uploadStatus = {}; au.uploadLog = []; au.lock(); au._setProgress(2); if (at === 0 && av) { au._uploadExtraOnly(); return } ar = au.filestack.length; au.hasInitData = false; if (au.uploadAsync) { ax = au._getOutData(); au._raise("filebatchpreupload", [ax]); au.fileBatchCompleted = false; au.uploadCache = { content: [], config: [], tags: [], append: true }; au.uploadAsyncCount = au.getFileStack().length; for (aw = 0; aw < ar; aw++) { au.uploadCache.content[aw] = null; au.uploadCache.config[aw] = null; au.uploadCache.tags[aw] = null } for (aw = 0; aw < ar; aw++) { if (au.filestack[aw] !== undefined) { au._uploadSingle(aw, au.filestack, true) } } return } au._uploadBatch(); return au.$element }, destroy: function () { var ar = this, at = ar.$container; at.find(".file-drop-zone").off(); ar.$element.insertBefore(at).off(i).removeData(); at.off().remove(); return ar.$element }, refresh: function (at) { var ar = this, au = ar.$element; at = at ? R.extend(true, {}, ar.options, at) : ar.options; ar.destroy(); au.fileinput(at); if (au.val()) { au.trigger("change.fileinput") } return au } }; R.fn.fileinput = function (au) { if (!G() && !p(9)) { return } var at = Array.apply(null, arguments), ar = []; at.shift(); this.each(function () { var aw = R(this), aA = aw.data("fileinput"), ax = typeof au === "object" && au, aB = ax.theme || aw.data("theme"), av = {}, ay = {}, aC = ax.language || aw.data("language") || "zh", az; if (!aA) { if (aB) { ay = R.fn.fileinputThemes[aB] || {} } if (aC !== "zh" && !z(R.fn.fileinputLocales[aC])) { av = R.fn.fileinputLocales[aC] || {} } az = R.extend(true, {}, R.fn.fileinput.defaults, ay, R.fn.fileinputLocales.zh, av, ax, aw.data()); aA = new q(this, az); aw.data("fileinput", aA) } if (typeof au === "string") { ar.push(aA[au].apply(aA, at)) } }); switch (ar.length) { case 0: return this; case 1: return ar[0]; default: return ar } }; R.fn.fileinput.defaults = { language: "zh", showCaption: true, showBrowse: true, showPreview: false, showRemove: true, showUpload: true, showCancel: true, showClose: true, showUploadedThumbs: true, browseOnZoneClick: false, autoReplace: false, previewClass: "", captionClass: "", mainClass: "file-caption-main", mainTemplate: null, purifyHtml: true, fileSizeGetter: null, initialCaption: "", initialPreview: [], initialPreviewDelimiter: "*$$*", initialPreviewAsData: false, initialPreviewFileType: "image", initialPreviewConfig: [], initialPreviewThumbTags: [], previewThumbTags: {}, initialPreviewShowDelete: true, removeFromPreviewOnError: false, deleteUrl: "", deleteExtraData: {}, overwriteInitial: true, layoutTemplates: a, previewTemplates: ac, previewZoomSettings: v, previewZoomButtonIcons: { prev: '<i class="glyphicon glyphicon-triangle-left"></i>', next: '<i class="glyphicon glyphicon-triangle-right"></i>', toggleheader: '<i class="glyphicon glyphicon-resize-vertical"></i>', fullscreen: '<i class="glyphicon glyphicon-fullscreen"></i>', borderless: '<i class="glyphicon glyphicon-resize-full"></i>', close: '<i class="glyphicon glyphicon-remove"></i>' }, previewZoomButtonClasses: { prev: "btn btn-navigate", next: "btn btn-navigate", toggleheader: "btn btn-default btn-header-toggle", fullscreen: "btn btn-default", borderless: "btn btn-default", close: "btn btn-default" }, allowedPreviewTypes: ah, allowedPreviewMimeTypes: null, allowedFileTypes: null, allowedFileExtensions: null, defaultPreviewContent: null, customLayoutTags: {}, customPreviewTags: {}, previewSettings: ao, fileTypeSettings: aj, previewFileIcon: '<i class="glyphicon glyphicon-file"></i>', previewFileIconClass: "file-other-icon", previewFileIconSettings: {}, previewFileExtSettings: {}, buttonLabelClass: "hidden-xs", browseIcon: '<i class="glyphicon glyphicon-folder-open"></i>&nbsp;', browseClass: "btn btn-primary", removeIcon: '<i class="glyphicon glyphicon-trash"></i>', removeClass: "btn btn-default", cancelIcon: '<i class="glyphicon glyphicon-ban-circle"></i>', cancelClass: "btn btn-default", uploadIcon: '<i class="glyphicon glyphicon-upload"></i>', uploadClass: "btn btn-default", uploadUrl: null, uploadAsync: true, uploadExtraData: {}, zoomModalHeight: 480, minImageWidth: null, minImageHeight: null, maxImageWidth: null, maxImageHeight: null, resizeImage: false, resizePreference: "width", resizeQuality: 0.92, resizeDefaultImageType: "image/jpeg", maxFileSize: 0, maxFilePreviewSize: 25600, minFileCount: 0, maxFileCount: 0, validateInitialCount: false, msgValidationErrorClass: "text-danger", msgValidationErrorIcon: '<i class="glyphicon glyphicon-exclamation-sign"></i> ', msgErrorClass: "file-error-message", progressThumbClass: "progress-bar progress-bar-success progress-bar-striped active", progressClass: "progress-bar progress-bar-success progress-bar-striped active", progressCompleteClass: "progress-bar progress-bar-success", progressErrorClass: "progress-bar progress-bar-danger", progressUploadThreshold: 99, previewFileType: "image", elCaptionContainer: null, elCaptionText: null, elPreviewContainer: null, elPreviewImage: null, elPreviewStatus: null, elErrorContainer: null, errorCloseButton: '<span class="close kv-error-close">&times;</span>', slugCallback: null, dropZoneEnabled: true, dropZoneTitleClass: "file-drop-zone-title", fileActionSettings: {}, otherActionButtons: "", textEncoding: "UTF-8", ajaxSettings: {}, ajaxDeleteSettings: {}, showAjaxErrorDetails: true }; R.fn.fileinput.Constructor = q; R(document).ready(function () { var ar = R("input.file[type=file]"); if (ar.length) { ar.fileinput() } }) }));